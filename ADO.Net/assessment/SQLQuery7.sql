create database MyPrjDB
use MyPrjDB

-- Create Mytrain table
CREATE TABLE Mytrain (
    TrainNumber INT PRIMARY KEY,
    TrainName NVARCHAR(100) NOT NULL,
    Class NVARCHAR(20) NOT NULL,
    TotalBerths INT NOT NULL,
    AvailableBerths INT NOT NULL,
    Source NVARCHAR(100) NOT NULL,
    Destination NVARCHAR(100) NOT NULL,
    Status NVARCHAR(20) NOT NULL,
    ticketPrice DECIMAL(10, 2) NOT NULL 
);
select *from Mytrain

-- Insert values into Mytrain table
INSERT INTO Mytrain (TrainNumber, TrainName, Class, TotalBerths, AvailableBerths, Source, Destination, Status, ticketPrice)
VALUES
    (12755, 'ExpressIndia', 'First', 100, 80, 'Chennai', 'Delhi', 'Active', 500.00),
    (12756, 'KAExpress', 'Second', 150, 120, 'Bangalore', 'Mysore', 'Active', 100.00),
    (12757, 'Vibgyortrack', 'Sleeper', 200, 180, 'Delhi', 'Chennai', 'Inactive', 1000.00);

-- Create Booking table
CREATE TABLE Booking (
    BookingID INT PRIMARY KEY IDENTITY, -- Autogenerated ID
    TrainNumber INT,
    Class NVARCHAR(50) NOT NULL,
    PassengerName NVARCHAR(100) NOT NULL,
    BookingDate DATE NOT NULL,
    DateOfTravel DATE NOT NULL,
    NumberOfTickets INT NOT NULL,
    
    Status NVARCHAR(10) NOT NULL,
    CONSTRAINT FK_Booking_TrainNumber FOREIGN KEY (TrainNumber) REFERENCES Mytrain(TrainNumber)
);

-- Create Cancellation table
CREATE TABLE Cancellation (
    CancellationID INT PRIMARY KEY IDENTITY, -- Autogenerated ID
    BookingID INT,
    DateOfCancellation DATE NOT NULL,
    TrainNumber INT NOT NULL,
    NumberOfTickets INT NOT NULL,
    Refund DECIMAL(10, 2) NOT NULL,
    Reason NVARCHAR(200) NOT NULL,
    ticketPrice DECIMAL(10, 2) NOT NULL, -- Add ticketPrice column here
    CONSTRAINT FK_Cancellation_BookingID FOREIGN KEY (BookingID) REFERENCES Booking(BookingID),
    CONSTRAINT FK_Cancellation_TrainNumber FOREIGN KEY (TrainNumber) REFERENCES Mytrain(TrainNumber)
);


---admin side--
CREATE OR ALTER PROCEDURE AddTrain
    @TrainNumber INT,
    @TrainName NVARCHAR(100),
    @Class NVARCHAR(20),
    @TotalBerths INT,
    @AvailableBerths INT,
    @Source NVARCHAR(100),
    @Destination NVARCHAR(100),
    @Status NVARCHAR(20),
	@ticketPrice DECIMAL(10, 2)
AS
BEGIN
    INSERT INTO Mytrain (TrainNumber, TrainName, Class, TotalBerths, AvailableBerths, Source, Destination, Status,ticketPrice)
    VALUES (@TrainNumber, @TrainName, @Class, @TotalBerths, @AvailableBerths, @Source, @Destination, @Status,@ticketPrice);
    PRINT 'Train added successfully!';
END;

CREATE OR ALTER PROCEDURE UpdateInactiveTrain
    @TrainNumber INT,
    @TrainName NVARCHAR(100),
    @Class NVARCHAR(20),
    @TotalBerths INT,
    @AvailableBerths INT,
    @Source NVARCHAR(100),
    @Destination NVARCHAR(100),
    @Status NVARCHAR(20),
	@ticketPrice DECIMAL(10, 2)
AS
BEGIN
    DECLARE @ExistingStatus NVARCHAR(20);

    -- Check if the train is inactive
    SELECT @ExistingStatus = Status
    FROM Mytrain
    WHERE TrainNumber = @TrainNumber;

    IF @ExistingStatus = 'Inactive'
    BEGIN
        -- Update the train details
        UPDATE Mytrain
        SET TrainName = @TrainName,
            Class = @Class,
            TotalBerths = @TotalBerths,
            AvailableBerths = @AvailableBerths,
            Source = @Source,
            Destination = @Destination,
            Status = @Status,
			ticketPrice=@ticketPrice
        WHERE TrainNumber = @TrainNumber;

        PRINT 'Train details updated successfully!';
    END
    ELSE
    BEGIN
        PRINT 'Cannot update train details. Train is not inactive.';
    END;
END;


CREATE OR ALTER PROCEDURE DeleteTrain
    @TrainNumber INT
AS
BEGIN
    DELETE FROM Mytrain
    WHERE TrainNumber = @TrainNumber;
    PRINT 'Train deleted successfully!';
END;

CREATE OR ALTER PROCEDURE ExitSystem
AS
BEGIN
    PRINT 'Exiting...';
END;


CREATE OR ALTER PROCEDURE ViewAllBookings
AS
BEGIN
    SELECT * FROM Booking;
END;


CREATE OR ALTER PROCEDURE ViewAllCancellations
AS
BEGIN
    SELECT * FROM Cancellation;
END;
----------------------------userside-----------------------------------------------------------------------------------------

CREATE OR ALTER PROCEDURE BookTicket
    @TrainNumber INT,
    @Class NVARCHAR(50),
    @PassengerName NVARCHAR(100),
    @BookingDate DATE,
    @DateOfTravel DATE,
    @NumberOfTickets INT,
   
    @Status NVARCHAR(10)
	
AS
BEGIN
    BEGIN TRY
        DECLARE @AvailableBerths INT;
        -- Get available berths for the selected train
        SELECT @AvailableBerths = AvailableBerths
        FROM Mytrain
        WHERE TrainNumber = @TrainNumber;

        -- Check if enough berths are available
        IF @AvailableBerths >= @NumberOfTickets
        BEGIN
            -- Update available berths
            UPDATE Mytrain
            SET AvailableBerths = AvailableBerths - @NumberOfTickets
            WHERE TrainNumber = @TrainNumber;

            -- Insert booking details into the Booking table
            INSERT INTO Booking (TrainNumber, Class, PassengerName, BookingDate, DateOfTravel, NumberOfTickets, Status)
            VALUES (@TrainNumber, @Class, @PassengerName, @BookingDate, @DateOfTravel, @NumberOfTickets, @Status);

            PRINT 'Ticket booked successfully!';
        END
        ELSE
        BEGIN
            PRINT 'Sorry, there are not enough berths available for booking.';
        END;
    END TRY
    BEGIN CATCH
        -- Handle errors here
        PRINT ERROR_MESSAGE();
    END CATCH;
END;

select * from Booking
CREATE OR ALTER PROCEDURE CancelBookedTicket
    @BookingID INT
AS
BEGIN
    DECLARE @TrainNumber INT;
    DECLARE @NumberOfTickets INT;
    DECLARE @TicketPrice DECIMAL(10, 2);

    -- Retrieve train number, number of tickets, and ticket price from booking
    SELECT @TrainNumber = TrainNumber, @NumberOfTickets = NumberOfTickets, @TicketPrice = ticketPrice
    FROM Booking
    WHERE BookingID = @BookingID;

    -- Calculate refund amount
    DECLARE @Refund DECIMAL(10, 2);
    SET @Refund = @TicketPrice * @NumberOfTickets;

    -- Update available berths
    UPDATE Mytrain
    SET AvailableBerths = AvailableBerths + @NumberOfTickets
    WHERE TrainNumber = @TrainNumber;

    -- Insert cancellation details into the Cancellation table
    INSERT INTO Cancellation (BookingID, DateOfCancellation, TrainNumber, NumberOfTickets, Refund, Reason)
    VALUES (@BookingID, GETDATE(), @TrainNumber, @NumberOfTickets, @Refund, 'Cancelled by user');

    -- Delete booking record
    DELETE FROM Booking
    WHERE BookingID = @BookingID;

    PRINT 'Ticket cancelled successfully! Refund amount: ' + CONVERT(VARCHAR(20), @Refund);
END;

